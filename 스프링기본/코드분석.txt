Spring xml파일 분석
(첫번째)
* bean 객체 : class(클래스가 있는 경로), id(객체명)를 이용하여
자바파일에서 이용할 객체 생성함. constructor-arg나 property를 이용하여
클래스에 있는 변수에 값을 직접 넣거나 참조할 경로를 입력할 수 있음. 예)
<bean id="studentDao" class="ems.member.dao.StudentDao" ></bean>
=> ems.member.dao 패키지 안에 있는 StudentDao 클래스의 studentDao
라는 이름의 객체를 생성함
* ref：생성하는 bean 객체가 어느 클래스를 참조하고 있는지 알려주는 역할. 예)
<bean id="studentDao" class="ems.member.dao.StudentDao" ></bean>
<bean id="allSelectService"
class="ems.member.service.StudentAllSelectService">
<constructor-arg ref="studentDao" ></constructor-arg>
</bean>
=> StudentAllSelectService 클래스의 allSelectService 라는 이름의 객체
생성하면서 해당 클래스가 StudentDao 클래스의 studentDao 객체를
참조하고 있음을 알려줌. * property : 속성값 입력(주입). name에 클래스의 변수명을 넣고 value 에
실질 값을 넣음. 예) <property name="sYear">
<value>2015</value>
</property>
<property name="eYear" value="2015" />
=> sYear 변수에 2015 라는 값 넣고 eYear 변수에 2015 값 넣음
- 2 -
value가 List 나 Map처럼 단일 값이 아니거나 객체같이 직접 값을 넣을 수
없는 경우 value로 넣지 않고 태그를 통해 주입함. 예)
<property name="dbInfos">
<map>
<entry>
<key>
<value>dev</value>
</key>
<ref
bean="dataBaseConnectionInfoDev"/>
</entry>
<entry>
<key>
<value>real</value>
</key>
<ref
bean="dataBaseConnectionInfoReal"/>
</entry>
</map>
</property>
=> dbInfos 변수(Map)의 키값을 dev와 real 로 지정, value는 ref를 이용해
dataBaseConnectionInfoDev 빈을 참조하여 값 입력. * import : 다른 xml 파일을 임포트 하여 현재 페이지에 추가. 예)
<import resource="classpath:appCtx2.xml"/>
=> 현재 페이지에 Ctx2.xml 파일 추가하여 해당 파일에 설정된 bean도 이용. * appCtmImport.xml 과 applicationContext.xml : appCtx1,2,3 파일의
소스코드를 모두 합한 파일. appCtmImport는 import 태그를 이용하고 applicationContext는 소스코드를
그대로 가져왔다. * 사용 이점 : 각 클래스들이 어떤 클래스를 참조하고 있는지 한눈에
파악하기 쉬움. 프로젝트 진행 중 변경사항이 있는 경우 xml 파일에서 값을
주입하게 되면 수정이 용이.


Spring xml파일 분석
(두번째)
.xml 부분 코드 분석
-----------------------------------------------------------------appCtx1.xml
constructor-arg :생성자 주입
생성자를 통한 빈 또는 값을 주입한다. 한 번에 여러 개의 객체를 주입할 수 있다. value 속성: 단순 값 또는 빈이 아닌 객체 주입
ref속성: 지정된 이름의 빈을 주입
index 속성: 파라미터 순서 지정
<bean id="registerService" class="ems.member.service.StudentRegisterService">
<constructor-arg ref="studentDao" ></constructor-arg></bean>
StudentAssembler.java에서 선언했던 변수들을 bean id값으로 넣음
공통적인 참조는 "studentDao"
----------------------------------------------------------------appCtx2.xml
property : 수정자 주입
수정자를 통해 의존관계를 주입
하나의 property가 하나의 빈 또는 값을 DI(의존성 주입)
value 속성: 단순 값 또는 빈이 아닌 객체 주입
ref속성: 지정된 이름의 빈을 주입
넣을 수 있는 값의 타입에 제한이 없다. <bean id="dataBaseConnectionInfoDev" class="ems.member.DataBaseConnectionInfo">
<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:xe" />
<property name="userId" value="scott" />
<property name="userPw" value="tiger" /></bean>
ems.member.DataBaseConnectionInfo.java로부터
id: dataBaseConnectionInfoDev 와 id: dataBaseConnectionInfoReal 객체 생성을 해서
변수들을 name에 넣고 각각의 url,id,pw 값들을 넣는다. 두 id의 value 값들이 다름. 즉, 연결할 url,id,pw 값이 두 개
---------------------------------------------------------------appCtx3.xml
EMSInformationService 클래스로부터 값을 받아오기 위한 작업
bean 생성하여 해당 값들을 <property>와 <value>로 값을 넣어줌
==>
<property name="sYear">
<value>2015</value>
</property>
List 값들은 <list>와 <value>로 넣어주고
==>
<property name="developers">
<list>
<value>Cheney.</value>
<value>Eloy.</value>
<value>Jasper.</value>
<value>Dillon.</value>
</list>
</property>
Map 값들은 <map><entry><key><value>로 넣어준다
==>
<property name="administrators">
<map><entry>
<key><value>Cheney</value></key>
<value>cheney@springPjt.org</value>
</entry></map>
#EMSInformationService 클래스에서
private Map<String, DataBaseConnectionInfo> dbInfos로 선언한 값에
appCtx2.xml의 두 개의 id를 각각 참조로 넣는다. 참조는 이렇게 Map value값에 넣는다
<ref bean="dataBaseConnectionInfoDev"/>
<ref bean="dataBaseConnectionInfoReal"/> 
----------------------------------------------------------appCtximport.xml
appCtx1.xml와 동일
<import resource="classpath:appCtx2.xml"/>
<import resource="classpath:appCtx3.xml"/>
두 xml import 하는 것만 다름
-------------------------------------------------------applicationContext.xml
appCtx1.xml, appCtx2, appCt3 전부 작성
==> 클래스의 의존관계를 한 눈에 볼 수 있어서 관리 용이
스레드 안정성 보장. 메모리 관리 용이 

