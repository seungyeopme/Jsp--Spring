<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

	<context:component-scan base-package="com.springbook.biz" />

	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

	<!-- DataSource 설정 -->
	<context:property-placeholder location="classpath:config/database.properties" />

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- Spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
</beans>
<!-- 
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="org.h2.Driver" />
		<property name="url" value="jdbc:h2:tcp://localhost/~/test" />
		<property name="username" value="sa" />
		<property name="password" value="" />
	</bean>
-->
<!-- 
<aop:config>
	<aop:pointcut id="allPointcut"
				  expression="execution(* com.springbook.biz..*Impl.*(..))" />
	
	<aop:pointcut id="getPointcut"
				  expression="execution(* com.springbook.biz..*Impl.get*(..))" />
	
	<aop:aspect ref="log">
		<aop:before pointcut-ref="allPointcut" method="printLog" />
	</aop:aspect>
</aop:config>
-->

<!-- <aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
<!-- 
<bean id="around"
	class="com.springbook.biz.common.AroundAdvice"></bean>

<aop:config>
	<aop:pointcut id="allPointcut"
				  expression="execution(* com.springbook.biz..*Impl.*(..))" />
	
	<aop:aspect ref="around">
		<aop:around pointcut-ref="allPointcut" method="aroundLog" />
	</aop:aspect>
</aop:config>
-->
<!-- 
<bean id="afterThrowing"
	class="com.springbook.biz.common.AfterThrowingAdvice"></bean>

<aop:config>
	<aop:pointcut id="allPointcut"
				  expression="execution(* com.springbook.biz..*Impl.*(..))" />
	
	<aop:aspect ref="afterThrowing">
		<aop:after-throwing pointcut-ref="allPointcut" method="exceptionLog"
							 throwing="exceptObj" />
	</aop:aspect>
</aop:config>
-->
<!-- 
<bean id="afterReturning"
	class="com.springbook.biz.common.AfterReturningAdvice"></bean>
<aop:config>
	<aop:pointcut id="getPointcut"
				  expression="execution(* com.springbook.biz..*Impl.get*(..))" />
	
	<aop:aspect ref="afterReturning">
		<aop:after-returning pointcut-ref="getPointcut" method="afterLog"
							 returning="returnObj" />
	</aop:aspect>
</aop:config>
-->
<!-- 
<bean id="before" class="com.springbook.biz.common.BeforeAdvice" />

<aop:config>
	<aop:pointcut id="allPointcut" 
				  expression="execution(* com.springbook.biz..*Impl.*(..))"/>
	
	<aop:aspect ref="before"> 
		<aop:before pointcut-ref="allPointcut" method="beforeLog"/>
	</aop:aspect>
</aop:config>
-->
<!-- <bean id="around" class="com.springbook.biz.common.AroundAdvice" /> -->
<!-- 
<bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice" />
<bean id="after" class="com.springbook.biz.common.AfterAdvice" /> 
-->
<!-- <bean id="before" class="com.springbook.biz.common.BeforeAdvice"></bean> -->
<!--    
<bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
	<property name="userDAO" ref="userDAO" />
</bean>

<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO" />	
-->
<!--  
<context:component-scan base-package="polymorphism" />
	<bean class="polymorphism.SonySpeaker"></bean>
-->
<!-- 
<bean id="collectionBean"
	  	  class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
			<props>
				<prop key="고길동">서울시 강남구 역삼동</prop>
				<prop key="마이콜">서울시 강서구 화곡동</prop>
			</props>			
		</property> 	
	</bean>
-->
<!-- 
<bean id="collectionBean"
	  	  class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
			<map>
				<entry>
					<key><value>고길동</value></key>
					<value>서울시 강남구 역삼동</value>
				</entry>
				<entry>
					<key><value>마이콜</value></key>
					<value>서울시 강서구 화곡동</value>
				</entry>
			</map>			
		</property> 	
	</bean>
-->
<!-- 
<set value-type="java.lang.String">
				<value>서울시 강남구 역삼동</value>
				<value>서울시 성동구 성수동</value>
				<value>서울시 성동구 성수동</value>
</set>
-->
<!-- 
<bean id="collectionBean"
	  	  class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
			<list>
				<value>서울시 강남구 역삼동</value>
				<value>서울시 성동구 행당동</value>
			</list>
		</property> 	
	</bean>
-->
<!--
<beans xmlns:p="http://www.springframework.org/schema/p" />
<bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="sony" p:price="2700000"/>

<bean id="sony" class="polymorphism.SonySpeaker"/>
<bean id="apple" class="polymorphism.AppleSpeaker"></bean>
</beans>
-->
<!--  
<bean id="tv" class="polymorphism.SamsungTV">
	<property name="speaker" ref="apple"></property>
	<property name="price" value="2700000"></property>
</bean>
-->
<!--  
<bean id="tv" class="polymorphism.SamsungTV">
	<constructor-arg ref="apple"></constructor-arg>
	<constructor-arg value="2700000"></constructor-arg>
</bean>
-->
<!--
<bean id="tv" class="polymorphism.SamsungTV">
	<constructor-arg index="0" ref="sony"></constructor-arg>
	<constructor-arg index="1" value="2700000"></constructor-arg>
</bean>

<bean id="sony" class="polymorphism.SonySpeaker"></bean>
-->
<!--
<bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" />
--> 
<!--  
<bean id="tv" class="polymorphism.SamsungTV" destroy-method="destroyMethod" /> 
-->
<!--
<bean id="tv" class="polymorphism.SamsungTV" lazy-init="true" /> 
-->
<!--  
<bean id="tv" class="polymorphism.SamsungTV" scope="singleton" />
-->
<!--  
<bean id="tv" class="polymorphism.SamsungTV" scope="prototype" />
-->