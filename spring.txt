springframework
:웹 어플리케이션 틀 안에서 필요한 기능 구현 가능
(DI, AOP, MVC, JDBC 제공함)

Maven: 자바프로젝트의 빌드를 자동으로 해주는 도구
개발자가 xml에 작성하는 프로젝트 정보를 토대로
컴파일, 라이브러리를 연결 할 수 있다.

MVC

java: java파일이 위치한다.
주로 패키지로 묶어서 관리한다.
웹 애플리케이션에서 사용되는 Controller, Service, DAO 객체들이 위치한다.

webapp: 웹과 관련된 파일들(스프링 설정파일, JSP, HTML 파일 등)이 위치한다.

resources: JSP 파일을 제외한 html, css, js파일 등이 위치한다.

spring 폴더: 스프링 컨테이너를 생성하기 위한 스프링 설정파일이 위치한다.

views 폴더: View로 사용될 JSP파일이 위치한다.

pom.xml: 메인 repository에서 프로젝트에 필요한 라이브러리를 내려받기
위한 메이븐 설정 파일



웹 애플리케이션에서 사용자가 요청을 하면 가장 먼저 DispatcherServlet클래스가 사용자의 요청을 받는다.
개발자는 DispatcherServlet을 서블릿으로 등록해야 한다.
그리고 사용자의 모든 요청을 받기 위해서 서블릿 맵핑을 해줘야 한다. (경로는 '/' 로 설정)

DispatcherServlet  -> HandlerMapping(사용자의 요청에 부합하는 컨트롤러 검색)          (ModelAndView)
                       -> HandlerAdapter(사용자의 요청에 부합하는 컨트롤러의 메소드 실행 요청)  ->  Controller -> Service -> DAO -> DataBase
                       -> ViewResolver -> View(사용자 응답 브라우저)

프론트 컨트롤러(DispatcherServlet) -> 컨트롤러

HttpServletRequest
=> 요청에서 HttpServletRequest 객체가 소멸하기까지 상태정보를 유지하고자 할 때
     한번의 요청으로 실행된 페이지끼리 정보를 공유하고자 할때 
HttpServletRequest 객체의 setAttribute()로 데이터를 등록하고 요청 재 지정으로 getAttribute()로 메소드를 추출

@RequestMapping : 컨트롤러 구현 = 클라이언트의 요청을 처리할 메소드를 개발
                         : 요청 URL을 어떤 메소드가 처리할지 결정하는 것

@Controller : view를 반환하기 위해 사용한다.
1. Client는 URI 형식으로 웹 서비스에 요청을 보낸다.
2. Mapping 되는 Handler를 찾는 DispatcherServlet이 요청을 인터셉트한다. 
3. Controller가 요청을 처리한 후에 응답을 DispatcherServlet으로 반환하고 DispatcherServlet은 View를 사용자에게 반환한다.