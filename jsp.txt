1. url 입력
2. IP주소로 변환
3. JSP페이지 요청(메인페이지 보여줌)
4. 요청/분석 넘기기(index.jsp)
5. 컴파일
6. 서블릿 적재
7. 데이터 전송, 실행결과 전송
8. 결과 페이지 전송
9. html 태그 분석 / 화면 구현

<% %> : 스크립트릿
<%= %> : expression
<%@ %> : 지시자
<%! %> : 선언부(변수 선언, 메소드)
<jsp:~~/> : 액션 태그

request, session, page..

setAttribute(name, value)
->이름에 값을 설정하겠다.

getAttribute(name)
->이름에 설정된 값 얻어냄

removeAttribute(name)

RequestDispatcher
:forward()메서드

a.jsp로 요청했을 때 
a.jsp에서 forward실행해서
b.jsp로 제어넘김
b.jsp로 결과를 브라우저에 넘김

1. forward태그로 이동

2. response -> sendredirect()

3. RequestDispatcher
->forward(request, response)메서드

include
forward

태그
<jsp:include~~>

include 속성 => <%@ %>
include 태그
include 함수

jsp: include
jsp: forward
jsp: param

<jsp:forward page="이동경로">
<jsp:param name="파라미터" value="파라미터값" />
</jsp:forward>

자바빈: 데이터 저장소(하나의 묶음으로 서버에 전송)
모든 변수들은 private

<%stu.setName(request.~~("name")
<jsp:useBean> 자바빈 생성

jsp: setProperty = ~~~
jsp: getProperty = ~~~

유효성 검사
-자바스크립트

JSP vs Servlet
-둘 다 자바기반 웹프로그래밍
-JSP는 페이지 요청이 있을 때 최초에 한번 자바 코드로 변환된 후 서블릿 클래스로 컴파일된다.

서블릿: 동적 처리 (뷰 , 로직사이 제어)
JSP: 정적 처리 (뷰, 디자이너)

모델 구조:
1. 모델1: JSP만으로 구성.
2. 모델2: JSP와 서블릿 동시에 사용
3. 스프링

커넥션 풀

쿠키: 웹 사이트에 접속할 때 생성되는 임시 파일
쿠키 목적: 사이트에 접속한 사용자의 정보유지, 사용자들이 해당
             사이트에 쉽게 접속하기 위해(자동 로그인)
ex) 로그인 -> id, pw를 기록한 쿠키가 만들어진다.

-쿠키는 쿠키를 생성한 서버에만 전송됨

세션
-JSP(서버)에서만 접근가능하므로 보안 유지가 강력하다.
-저장할 수 있는 데이터에 한계가 없다.

Enumeration(열거형)
->session 객체로 getAttributeNames()
  를 호출하면 세션에 저장된 항목들의 이름들을 
  Enumeration형으로 얻어옴

hasMoreElement
next
